generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String                 @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  properties  Property[]
  users       User[] // Users belonging to this organization
  roles       Role[] // Custom roles for this organization
  userRoles   UserOrganizationRole[] // For ABAC at organization level
}

model Property {
  id             String             @id @default(cuid())
  name           String
  description    String?
  address        String
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id])
  rooms          Room[]
  userRoles      UserPropertyRole[] // For ABAC at property level
  visits         Visit[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([organizationId])
  @@index([name])
}

model Room {
  id         String   @id @default(cuid())
  name       String
  type       String // e.g., bedroom, kitchen, etc.
  floor      Int?
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  visits     Visit[]
  occupied   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([propertyId])
  @@index([occupied])
}

model User {
  id              String                 @id @default(cuid())
  googleId        String                 @unique
  phoneNumber     String?                @unique
  isPhoneVerified Boolean                @default(false)
  email           String
  password        String?
  name            String
  organizationId  String?
  organization    Organization?          @relation(fields: [organizationId], references: [id])
  userRoles       UserPropertyRole[] // For ABAC at property level
  orgRoles        UserOrganizationRole[] // For ABAC at organization level
  appRoles        UserAppRole[] // For ABAC at application level
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@index([organizationId])
  @@index([email])
}

model Role {
  id             String                 @id @default(cuid())
  name           String                 @unique
  description    String?
  organizationId String?
  organization   Organization?          @relation(fields: [organizationId], references: [id])
  permissions    PermissionRole[] // Relation to PermissionRole
  userRoles      UserPropertyRole[] // Relation to UserPropertyRole
  orgRoles       UserOrganizationRole[] // Relation to UserOrganizationRole
  appRoles       UserAppRole[] // Relation to UserAppRole
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@index([organizationId])
  @@index([name])
}

model Permission {
  id          String           @id @default(cuid())
  action      String // e.g., edit, view, upload_doc
  entityType  String // e.g., Property, Organization, Room, Application
  description String?
  roles       PermissionRole[] // Relation to PermissionRole
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([action, entityType])
  @@index([action])
  @@index([entityType])
}

// Junction table for Role-Permission relationship
model PermissionRole {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// Junction table for User-Property-Role relationship (ABAC)
model UserPropertyRole {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  roleId     String
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, propertyId, roleId])
  @@index([userId])
  @@index([roleId])
}

// Junction table for User-Organization-Role relationship (ABAC)
model UserOrganizationRole {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  roleId         String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId, roleId])
  @@index([userId])
  @@index([roleId])
}

// Junction table for User-Application-Role relationship (ABAC)
model UserAppRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Visitor {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String
  visits    Visit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([phone])
}

model Visit {
  id         String   @id @default(cuid())
  visitorId  String
  propertyId String
  roomId     String
  visitor    Visitor  @relation(fields: [visitorId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([visitorId])
  @@index([propertyId])
  @@index([roomId])
  @@index([startDate])
  @@index([endDate])
}
